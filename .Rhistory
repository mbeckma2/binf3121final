#vennCounts(resultfinal) #, include=""
#resultboolean <- resultcounts > 0
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
resultfinal <- resultcounts[c(-12,-15,-16),-5]
#resultfinal
vennCounts(resultfinal) #, include=""
#resultboolean <- resultcounts > 0
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
resultfinal <- resultcounts[c(-12,-15,-16),-5]
#resultfinal
vennDiagram(resultfinal) #, include=""
#resultboolean <- resultcounts > 0
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
resultfinal <- resultcounts[c(-12,-15,-16),]
resultfinal
#vennDiagram(resultfinal) #, include=""
#resultboolean <- resultcounts > 0
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
resultfinal <- resultcounts[c(-12,-15,-16),]
vennDiagram(resultcounts[c(-12,-15,-16),])
#vennDiagram(resultfinal) #, include=""
#resultboolean <- resultcounts > 0
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
resultfinal <- resultcounts[c(-12,-15,-16),]
resultfinal
#vennDiagram(resultfinal) #, include=""
#resultboolean <- resultcounts > 0
?bar
result = decideTests(fit2,p.value=0.05, lfc = 1)
barplot(result)
cont.matrix= makeContrasts(
M6PR.U, M6PR.T, COL.T, COL.U
levels = exp_design)
cont.matrix= makeContrasts(
M6PR.U, M6PR.T, COL.T, COL.U,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2,p.value=0.05, lfc = 1)
barplot(result)
cont.matrix= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
M6PRvCOL.T = M6PR.T - COL.T,
M6PRvCOL.U = M6PR.U - COL.U,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2,p.value=0.05, lfc = 1)
barplot(result)
cont.matrix= makeContrasts(
M6PR.TvU.up = (M6PR.U - M6PR.T) > 0,
COL.UvT.up = (COL.U - COL.T) > 0,
M6PRvCOL.T.up = (M6PR.T - COL.T) > 0,
M6PRvCOL.U.up = (M6PR.U - COL.U) > 0,
M6PR.TvU.down = (M6PR.U - M6PR.T) < 0,
COL.UvT.down = (COL.U - COL.T) < 0,
M6PRvCOL.T.down = (M6PR.T - COL.T) < 0,
M6PRvCOL.U.down = (M6PR.U - COL.U) < 0,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2,p.value=0.05, lfc = 1)
barplot(result)
cont.matrix= makeContrasts(
M6PR.TvU.up = sum((M6PR.U - M6PR.T) > 0),
COL.UvT.up = (COL.U - COL.T) > 0,
M6PRvCOL.T.up = (M6PR.T - COL.T) > 0,
M6PRvCOL.U.up = (M6PR.U - COL.U) > 0,
M6PR.TvU.down = (M6PR.U - M6PR.T) < 0,
COL.UvT.down = (COL.U - COL.T) < 0,
M6PRvCOL.T.down = (M6PR.T - COL.T) < 0,
M6PRvCOL.U.down = (M6PR.U - COL.U) < 0,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2,p.value=0.05, lfc = 1)
barplot(result)
cont.matrix= makeContrasts(
M6PR.TvU.up = sum((M6PR.U - M6PR.T) > 0),
COL.UvT.up = sum((COL.U - COL.T) > 0),
M6PRvCOL.T.up = sum((M6PR.T - COL.T) > 0),
M6PRvCOL.U.up = sum((M6PR.U - COL.U) > 0),
M6PR.TvU.down = sum((M6PR.U - M6PR.T) < 0),
COL.UvT.down = sum((COL.U - COL.T) < 0),
M6PRvCOL.T.down = sum((M6PR.T - COL.T) < 0),
M6PRvCOL.U.down = sum((M6PR.U - COL.U) < 0),
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2,p.value=0.05, lfc = 1)
barplot(result)
cont.matrix
result = decideTests(fit2,p.value=0.05, lfc = 1)
vennDiagram(result)
result = decideTests(fit2,p.value=0.05, lfc = 1)
vennDiagram(result)
result = decideTests(fit2,p.value=0.05, lfc = 1)
barplot(result)
cont.matrix= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
M6PRvCOL.T = M6PR.T - COL.T,
M6PRvCOL.U = M6PR.U - COL.U,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2,p.value=0.05, lfc = 1)
barplot(result)
cont.matrix
result = decideTests(fit2,p.value=0.05)
barplot(result)
result
write.table(result, file="resultfile", row.names=false, sep="\t")
write.table(result, file="resultfile", row.names=F, sep="\t")
write.table(result, file="resultfile", sep="\t")
result = decideTests(fit2,p.value=0.05, lfc=1)
barplot(result)
# lfc =1 for 2-fold changes
result = decideTests(fit2,p.value=0.05, lfc=1)
barplot(as.matrix(result), beside=TRUE)
# lfc =1 for 2-fold changes
result = decideTests(fit2,p.value=0.05, lfc=1)
barplot(result, beside=TRUE)
sum(result[,1])
sum(result[,2])
sum(result[,3])
sum(result[,2]>0)
sum(result[,2]<0)
# lfc =1 for 2-fold changes
result = decideTests(fit2,p.value=0.05, lfc=1)
names = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated),
nrow=2,
dimnames=list(c("upregulated", "downregulated"), names))
#barplot(result, beside=TRUE)
resultsMatrix
# lfc =1 for 2-fold changes
result = decideTests(fit2,p.value=0.05, lfc=1)
names = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated),
nrow=2,
dimnames=list(c("upregulated", "downregulated"), names))
barplot(as.matrix(resultsMatrix), beside=TRUE)
# lfc =1 for 2-fold changes
result = decideTests(fit2,p.value=0.05,)
names = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated),
nrow=2,
dimnames=list(c("upregulated", "downregulated"), names))
barplot(as.matrix(resultsMatrix), beside=TRUE)
# lfc =1 for 2-fold changes
result = decideTests(fit2,p.value=0.01, lfc=1)
names = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated),
nrow=2,
dimnames=list(c("upregulated", "downregulated"), names))
barplot(as.matrix(resultsMatrix), beside=TRUE)
# lfc =1 for 2-fold changes
result = decideTests(fit2,p.value=0.05, lfc=1)
names = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated),
nrow=2,
dimnames=list(c("upregulated", "downregulated"), names))
barplot(as.matrix(resultsMatrix), beside=TRUE)
length(result[,1])
resultsMatrix
#Required libraries
library(affy)
library(limma)
library(RSQLite)
#Import data from sources
pd = read.AnnotatedDataFrame("samples.txt",header=TRUE,sep=",",row.names=1)
mydata = ReadAffy(filenames=pd$filename,phenoData=pd,verbose=TRUE)
sampleNames(mydata)=row.names(pData(pd))
#Call functions to organize data
eset = rma(mydata)
expression_data = exprs(eset)
TS = paste(pd$genotype,pd$treatment,sep=".")
TS = factor(TS, levels= c("M6PR.U","M6PR.T","COL.U","COL.T"))
exp_design = model.matrix(~0 + TS)
colnames(exp_design) = levels(TS)
exp_design
fit=lmFit(eset,exp_design)
cont.matrix= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
M6PRvCOL.T = M6PR.T - COL.T,
M6PRvCOL.U = M6PR.U - COL.U,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
# lfc =1 for 2-fold changes
result = decideTests(fit2, p.value=0.05, lfc=1)
colnames = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
rownames = c("upregulated", "downregulated")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated), nrow=2, dimnames=list(rownames, colnames))
barplot(as.matrix(resultsMatrix), beside=TRUE)
?barplot
# lfc =1 for 2-fold changes
result = decideTests(fit2, p.value=0.05, lfc=1)
#Required libraries
library(affy)
library(limma)
library(RSQLite)
#Import data from sources
pd = read.AnnotatedDataFrame("samples.txt",header=TRUE,sep=",",row.names=1)
mydata = ReadAffy(filenames=pd$filename,phenoData=pd,verbose=TRUE)
sampleNames(mydata)=row.names(pData(pd))
#Call functions to organize data
eset = rma(mydata)
expression_data = exprs(eset)
TS = paste(pd$genotype,pd$treatment,sep=".")
TS = factor(TS, levels= c("M6PR.U","M6PR.T","COL.U","COL.T"))
exp_design = model.matrix(~0 + TS)
colnames(exp_design) = levels(TS)
exp_design
fit=lmFit(eset,exp_design)
cont.matrix= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
M6PRvCOL.T = M6PR.T - COL.T,
M6PRvCOL.U = M6PR.U - COL.U,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
# lfc =1 for 2-fold changes
result = decideTests(fit2, p.value=0.05, lfc=1)
colnames = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
rownames = c("upregulated", "downregulated")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated), nrow=2, dimnames=list(rownames, colnames))
barplot(as.matrix(resultsMatrix), beside=TRUE, legend = rownames(counts)))
# lfc =1 for 2-fold changes
result = decideTests(fit2, p.value=0.05, lfc=1)
colnames = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
rownames = c("upregulated", "downregulated")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated), nrow=2, dimnames=list(rownames, colnames))
barplot(as.matrix(resultsMatrix), beside=TRUE, legend = rownames(counts))
# lfc =1 for 2-fold changes
result = decideTests(fit2, p.value=0.05, lfc=1)
colnames = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
rownames = c("upregulated", "downregulated")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated), nrow=2, dimnames=list(rownames, colnames))
barplot(as.matrix(resultsMatrix), legend = rownames(counts), beside=TRUE)
# lfc =1 for 2-fold changes
result = decideTests(fit2, p.value=0.05, lfc=1)
colnames = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
rownames = c("upregulated", "downregulated")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated), nrow=2, dimnames=list(rownames, colnames))
barplot(as.matrix(resultsMatrix), legend = rownames, beside=TRUE)
result
resultsMatrix
# lfc =1 for 2-fold changes
result = decideTests(fit2, p.value=0.05)
colnames = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
rownames = c("upregulated", "downregulated")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated), nrow=2, dimnames=list(rownames, colnames))
barplot(as.matrix(resultsMatrix), legend = rownames, beside=TRUE)
# lfc =1 for 2-fold changes
result = decideTests(fit2, p.value=0.01, lfc=1)
colnames = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
rownames = c("upregulated", "downregulated")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated), nrow=2, dimnames=list(rownames, colnames))
barplot(as.matrix(resultsMatrix), legend = rownames, beside=TRUE)
# lfc =1 for 2-fold changes
result = decideTests(fit2, p.value=0.1, lfc=1)
colnames = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
rownames = c("upregulated", "downregulated")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated), nrow=2, dimnames=list(rownames, colnames))
barplot(as.matrix(resultsMatrix), legend = rownames, beside=TRUE)
# lfc =1 for 2-fold changes
result = decideTests(fit2, p.value=0.05, lfc=1)
colnames = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
rownames = c("upregulated", "downregulated")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated), nrow=2, dimnames=list(rownames, colnames))
barplot(as.matrix(resultsMatrix), legend = rownames, beside=TRUE)
# lfc =1 for 2-fold changes
result = decideTests(fit2, p.value=0.1, lfc=1)
colnames = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
rownames = c("upregulated", "downregulated")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated), nrow=2, dimnames=list(rownames, colnames))
barplot(as.matrix(resultsMatrix), legend = rownames, beside=TRUE)
# lfc =1 for 2-fold changes
result = decideTests(fit2, p.value=0.05, lfc=1)
colnames = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
rownames = c("upregulated", "downregulated")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated), nrow=2, dimnames=list(rownames, colnames))
barplot(as.matrix(resultsMatrix), legend = rownames, beside=TRUE)
f="ftp://ftp.arabidopsis.org/Microarrays/Affymetrix/affy_ATH1_array_elements-2010-12-20.txt"
annots = read.delim(f, na.strings = "", fill=TRUE, header=T, sep="\t")
annots=annots[,c(1,5,6)] #Save selected (columns 1,5,6) info in annots table
N=dim(eset)[1]
top.WT.SvU = topTable(fit2,coef=1,number=N,p.value=0.05)
top.Mu.SvU = topTable(fit2,coef=2,number=N,p.value=0.05)
top.Diff = topTable(fit2,coef=3,number=N,p.value=0.05)
N
?topTable
cof
coef
N=dim(eset)[1]
top.M6PR.TvU = topTable(fit2,coef=1,number=N,p.value=0.05)
top.COL.UvT = topTable(fit2,coef=2,number=N,p.value=0.05)
top.M6PRvCOL.T = topTable(fit2,coef=3,number=N,p.value=0.05)
top.M6PRvCOL.U = topTable(fit2,coef=4,number=N,p.value=0.05)
N=dim(eset)[1]
top.M6PR.TvU = topTable(fit2,coef=1,number=N,p.value=0.05)
top.COL.UvT = topTable(fit2,coef=2,number=N,p.value=0.05)
top.M6PRvCOL.T = topTable(fit2,coef=3,number=N,p.value=0.05)
top.M6PRvCOL.U = topTable(fit2,coef=4,number=N,p.value=0.05)
row.names(annots)=annots$array_element_name
top.M6PR.TvU.merged=merge(annots,top.M6PR.TvU,by="row.names")
top.COL.UvT.merged=merge(annots,top.COL.UvT,by="row.names")
top.M6PRvCOL.T.merged=merge(annots,top.M6PRvCOL.T,by="row.names")
top.M6PRvCOL.U.merged=merge(annots,top.M6PRvCOL.U,by="row.names")
top.M6PRvCOL.U.merged
View(top.M6PRvCOL.T)
View(top.M6PRvCOL.T.merged)
View(top.M6PRvCOL.T.merged)
# lfc =1 for 2-fold changes
result = decideTests(fit2, p.value=0.05, lfc=1)
colnames = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
rownames = c("upregulated", "downregulated")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated), nrow=2, dimnames=list(rownames, colnames))
barplot(as.matrix(resultsMatrix), legend = rownames, beside=TRUE)
cont.matrix2= makeContrasts(
M6PRvCOL = (M6PR.U - M6PR.T) - (COL.U - COL.T),
TvU = (M6PR.T - COL.T) - (M6PR.U - COL.U)
levels = exp_design)
cont.matrix2= makeContrasts(
M6PRvCOL = (M6PR.U - M6PR.T) - (COL.U - COL.T),
TvU = (M6PR.T - COL.T) - (M6PR.U - COL.U),
levels = exp_design)
fit3 = contrasts.fit(fit,cont.matrix2)
fit3 = eBayes(fit3)
# lfc =1 for 2-fold changes
result = decideTests(fit2, p.value=0.05, lfc=1)
vennDiagram(result)
cont.matrix2= makeContrasts(
M6PRvCOL = (M6PR.U - M6PR.T) - (COL.U - COL.T),
TvU = (M6PR.T - COL.T) - (M6PR.U - COL.U),
levels = exp_design)
fit3 = contrasts.fit(fit,cont.matrix2)
fit3 = eBayes(fit3)
# lfc =1 for 2-fold changes
result = decideTests(fit3, p.value=0.05, lfc=1)
vennDiagram(result)
cont.matrix2= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
Diff = (M6PR.U - M6PR.T) - (COL.U - COL.T)
levels = exp_design)
cont.matrix2= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
Diff = (M6PR.U - M6PR.T) - (COL.U - COL.T),
levels = exp_design)
fit3 = contrasts.fit(fit,cont.matrix2)
fit3 = eBayes(fit3)
# lfc =1 for 2-fold changes
result = decideTests(fit3, p.value=0.05, lfc=1)
vennDiagram(result)
resultsMatrix
cont.matrix2= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
Diff = (M6PR.U - M6PR.T) - (COL.U - COL.T),
levels = exp_design)
fit3 = contrasts.fit(fit,cont.matrix2)
fit3 = eBayes(fit3)
# lfc =1 for 2-fold changes
result = decideTests(fit3, p.value=0.05, lfc=1)
#vennDiagram(result)
vennCounts(result)
cont.matrix2= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
Diff = (M6PR.U - M6PR.T) - (COL.U - COL.T),
levels = exp_design)
fit3 = contrasts.fit(fit,cont.matrix2)
fit3 = eBayes(fit3)
# lfc =1 for 2-fold changes
result = decideTests(fit3, p.value=0.05, lfc=1)
vennDiagram(result)
vennCounts(result)
cont.matrix2= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
Diff = (M6PR.U - M6PR.T) - (COL.U - COL.T),
levels = exp_design)
fit3 = contrasts.fit(fit,cont.matrix2)
fit3 = eBayes(fit3)
# lfc =1 for 2-fold changes
result = decideTests(fit3, p.value=0.05, lfc=1)
vennDiagram(result)
#vennCounts(result)
N=dim(eset)[1]
top.M6PR.TvU = topTable(fit3,coef=1,number=N,p.value=0.05)
top.COL.UvT = topTable(fit3,coef=2,number=N,p.value=0.05)
top.Diff = topTable(fit3,coef=3,number=N,p.value=0.05)
length(top.Diff)
top.Diff
#Required libraries
library(affy)
library(limma)
library(RSQLite)
#Import data from sources
pd = read.AnnotatedDataFrame("samples.txt",header=TRUE,sep=",",row.names=1)
mydata = ReadAffy(filenames=pd$filename,phenoData=pd,verbose=TRUE)
sampleNames(mydata)=row.names(pData(pd))
#Call functions to organize data
eset = rma(mydata)
expression_data = exprs(eset)
TS = paste(pd$genotype,pd$treatment,sep=".")
TS = factor(TS, levels= c("M6PR.U","M6PR.T","COL.U","COL.T"))
exp_design = model.matrix(~0 + TS)
colnames(exp_design) = levels(TS)
exp_design
fit=lmFit(eset,exp_design)
cont.matrix= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
M6PRvCOL.T = M6PR.T - COL.T,
M6PRvCOL.U = M6PR.U - COL.U,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
# lfc =1 for 2-fold changes
result = decideTests(fit2, p.value=0.05, lfc=1)
colnames = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
rownames = c("upregulated", "downregulated")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated), nrow=2, dimnames=list(rownames, colnames))
barplot(as.matrix(resultsMatrix), legend = rownames, beside=TRUE)
cont.matrix2= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
Diff = (M6PR.U - M6PR.T) - (COL.U - COL.T),
levels = exp_design)
fit3 = contrasts.fit(fit,cont.matrix2)
fit3 = eBayes(fit3)
# lfc =1 for 2-fold changes
result = decideTests(fit3, p.value=0.05, lfc=1)
vennDiagram(result)
#vennCounts(result)
f="ftp://ftp.arabidopsis.org/Microarrays/Affymetrix/affy_ATH1_array_elements-2010-12-20.txt"
annots = read.delim(f, na.strings = "", fill=TRUE, header=T, sep="\t")
annots=annots[,c(1,5,6)] #Save selected (columns 1,5,6) info in annots table
N=dim(eset)[1]
top.M6PR.TvU = topTable(fit3,coef=1,number=N,p.value=0.05)
top.COL.UvT = topTable(fit3,coef=2,number=N,p.value=0.05)
top.Diff = topTable(fit3,coef=3,number=N,p.value=0.05)
row.names(annots)=annots$array_element_name
top.M6PR.TvU.merged=merge(annots,top.M6PR.TvU,by="row.names")
top.COL.UvT.merged=merge(annots,top.COL.UvT,by="row.names")
top.Diff.merged=merge(annots,top.Diff,by="row.names")
genes.Diff = unique(top.Diff.merged$locus)
genes.COL.UvT = unique(top.COL.UvT.merged$locus)
genes.M6PR.TvU = unique(top.M6PR.TvU.merged$locus)
intersection = intersect(genes.COL.UvT,genes.M6PR.TvU)
length(intersection)
length(genes.Diff)
length(genes.COL.UvT)
# lfc =1 for 2-fold changes
result = decideTests(fit3, p.value=0.05, lfc=1)
vennDiagram(result)
vennCounts(result)
length(intersetction)
genes.M6PR.TvU = unique(top.M6PR.TvU.merged$locus)
genes.COL.UvT = unique(top.COL.UvT.merged$locus)
genes.Diff = unique(top.Diff.merged$locus)
intersection = intersect(genes.COL.UvT,genes.M6PR.TvU)
length(intersection)
