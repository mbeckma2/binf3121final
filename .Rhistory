#Required libraries
library(affy)
library(limma)
library(RSQLite)
#Import data from sources
pd = read.AnnotatedDataFrame("samples.txt",header=TRUE,sep=",",row.names=1)
#Required libraries
library(affy)
library(limma)
library(RSQLite)
#Import data from sources
pd = read.AnnotatedDataFrame("samples.txt",header=TRUE,sep=",")
#Required libraries
library(affy)
library(limma)
library(RSQLite)
#Import data from sources
pd = read.AnnotatedDataFrame("samples.txt",header=TRUE,sep=",",row.names=1)
#Required libraries
library(affy)
library(limma)
library(RSQLite)
#Import data from sources
pd = read.AnnotatedDataFrame("samples.txt",header=TRUE,sep=",",row.names=1)
mydata = ReadAffy(filenames=pd$filename,phenoData=pd,verbose=TRUE)
sampleNames(mydata)=row.names(pData(pd))
#Call functions to organize data
eset = rma(mydata)
expression_data = exprs(eset)
View(expression_data)
View(expression_data)
#Required libraries
library(affy)
library(limma)
library(RSQLite)
#Import data from sources
pd = read.AnnotatedDataFrame("samples.txt",header=TRUE,sep=",",row.names=1)
mydata = ReadAffy(filenames=pd$filename,phenoData=pd,verbose=TRUE)
sampleNames(mydata)=row.names(pData(pd))
#Call functions to organize data
eset = rma(mydata)
expression_data = exprs(eset)
#Required libraries
library(affy)
library(limma)
library(RSQLite)
#Import data from sources
pd = read.AnnotatedDataFrame("samples.txt",header=TRUE,sep=",",row.names=1)
mydata = ReadAffy(filenames=pd$filename,phenoData=pd,verbose=TRUE)
sampleNames(mydata)=row.names(pData(pd))
#Call functions to organize data
eset = rma(mydata)
expression_data = exprs(eset)
#Required libraries
library(affy)
library(limma)
library(RSQLite)
#Import data from sources
pd = read.AnnotatedDataFrame("samples.txt",header=TRUE,sep=",",row.names=1)
mydata = ReadAffy(filenames=pd$filename,phenoData=pd,verbose=TRUE)
sampleNames(mydata)=row.names(pData(pd))
#Call functions to organize data
eset = rma(mydata)
expression_data = exprs(eset)
image(mydata)
image(mydata)
?vennDiagram
?decideTests
#Required libraries
library(affy)
library(limma)
library(RSQLite)
#Import data from sources
pd = read.AnnotatedDataFrame("samples.txt",header=TRUE,sep=",",row.names=1)
mydata = ReadAffy(filenames=pd$filename,phenoData=pd,verbose=TRUE)
sampleNames(mydata)=row.names(pData(pd))
#Call functions to organize data
eset = rma(mydata)
expression_data = exprs(eset)
TS = paste(pd$genotype,pd$treatment,sep=".")
TS = factor(TS, levels= c("M6PR.U","M6PR.T","COL.U","COL.T"))
exp_design = model.matrix(~0 + TS)
colnames(exp_design) = levels(TS)
exp_design
fit=lmFit(eset,exp_design)
cont.matrix= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2,p.value=0.05, lfc = 1)
vennDiagram(result)
cont.matrix= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2,p.value=0.05, lfc = 1)
vennDiagram(result)
fit=lmFit(eset,exp_design)
plot(fit)
fit=lmFit(eset,exp_design)
plot(eset)
?decideTests
#differentiate between up-regulated and down-regulated genes.
M6PR.TvU.up = (M6PR.U - M6PR.T) > 0
#Required libraries
library(affy)
library(limma)
library(RSQLite)
#Import data from sources
pd = read.AnnotatedDataFrame("samples.txt",header=TRUE,sep=",",row.names=1)
mydata = ReadAffy(filenames=pd$filename,phenoData=pd,verbose=TRUE)
sampleNames(mydata)=row.names(pData(pd))
#Call functions to organize data
eset = rma(mydata)
expression_data = exprs(eset)
TS = paste(pd$genotype,pd$treatment,sep=".")
TS = factor(TS, levels= c("M6PR.U","M6PR.T","COL.U","COL.T"))
exp_design = model.matrix(~0 + TS)
colnames(exp_design) = levels(TS)
exp_design
fit=lmFit(eset,exp_design)
#differentiate between up-regulated and down-regulated genes.
M6PR.TvU.up = (M6PR.U - M6PR.T) > 0
cont.matrix= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
M6PRvCOL.T = M6PR.T - COL.T,
M6PRvCOL.U = M6PR.U - COL.U,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2, method="global", p.value=0.05, lfc = 1)
up = which(results[,1] == 1)
result = decideTests(fit2, method="global", p.value=0.05, lfc = 1)
up = which(result[,1] == 1)
upGenes = fit2[up, ]
vennDiagram(upGenes)
result = decideTests(fit2, p.value=0.05, lfc = 1)
vennDiagram(upGenes)
#differentiate between up-regulated and down-regulated genes.
M6PR.TvU.up = (M6PR.U - M6PR.T) > 0
#differentiate between up-regulated and down-regulated genes.
M6PR.TvU.up = (M6PR.U1 && M6PR.U2 - M6PR.T1 && M6PR.T2) > 0
#differentiate between up-regulated and down-regulated genes.
M6PR.TvU.up = (M6PR.U - M6PR.T) > 0
cont.matrix= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
M6PRvCOL.T = M6PR.T - COL.T,
M6PRvCOL.U = M6PR.U - COL.U,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
#differentiate between up-regulated and down-regulated genes.
M6PR.TvU.up = (M6PR.U - M6PR.T) > 0
fit
cont.matrix= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
M6PRvCOL.T = M6PR.T - COL.T,
M6PRvCOL.U = M6PR.U - COL.U,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2, p.value=0.05, lfc = 1)
vennDiagram(upGenes)
#Required libraries
library(affy)
library(limma)
library(RSQLite)
#Import data from sources
pd = read.AnnotatedDataFrame("samples.txt",header=TRUE,sep=",",row.names=1)
mydata = ReadAffy(filenames=pd$filename,phenoData=pd,verbose=TRUE)
sampleNames(mydata)=row.names(pData(pd))
#Call functions to organize data
eset = rma(mydata)
expression_data = exprs(eset)
TS = paste(pd$genotype,pd$treatment,sep=".")
TS = factor(TS, levels= c("M6PR.U","M6PR.T","COL.U","COL.T"))
exp_design = model.matrix(~0 + TS)
colnames(exp_design) = levels(TS)
exp_design
fit=lmFit(eset,exp_design)
result = decideTests(fit2,p.value=0.05, lfc = 1)
vennDiagram(result)
cont.matrix= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
M6PRvCOL.T = M6PR.T - COL.T,
M6PRvCOL.U = M6PR.U - COL.U,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
?vennDiagram
result = decideTests(fit2,p.value=0.05, lfc = 1)
vennCounts(result)
#vennDiagram(result, include="")
?makeContrasts
cont.matrix= makeContrasts(
M6PR.U, M6PR.T, Col.U, Col.T,
levels = exp_design)
cont.matrix= makeContrasts(
M6PR.U, M6PR.T, COL.U, COL.T,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2,p.value=0.05, lfc = 1)
#vennCounts(result)
vennDiagram(result, include="")
result = decideTests(fit2,p.value=0.05, lfc = 1)
#vennCounts(result)
vennDiagram(result) #, include=""
result = decideTests(fit2,p.value=0.05, lfc = 1)
vennCounts(result)
#vennDiagram(result) #, include=""
cont.matrix= makeContrasts(
M6PR.U, M6PR.T, COL.U, COL.T,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2,p.value=0.05, lfc = 1)
vennCounts(result)
#vennDiagram(result) #, include=""
cont.matrix= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
M6PRvCOL.T = M6PR.T - COL.T,
M6PRvCOL.U = M6PR.U - COL.U,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2,p.value=0.05, lfc = 1)
vennCounts(result)
#vennDiagram(result) #, include=""
result = decideTests(fit2,p.value=0.05, lfc = 1)
#vennCounts(result)
vennDiagram(result) #, include=""
result = decideTests(fit2,p.value=0.05, lfc = 1)
vennCounts(result)
#vennDiagram(result) #, include=""
result = decideTests(fit2,p.value=0.05, lfc = 1)
vennCounts(result)
vennDiagram(result) #, include=""
result = decideTests(fit2,p.value=0.05, lfc = 1)
vennCounts(result)
vennDiagram(result) #, include=""
resultboolean <- result > 0
resultboolean
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
vennDiagram(result) #, include=""
resultboolean <- resultcounts > 0
resultboolean
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
vennDiagram(result) #, include=""
resultboolean <- resultcounts > 0
vennDiagram(resultboolean)
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
vennDiagram(result) #, include=""
resultboolean <- resultcounts > 0
venn(resultboolean)
?gplots
resultcounts
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
resultfinal <- resultcounts[-16,]
vennDiagram(result) #, include=""
resultboolean <- resultcounts > 0
resultfinal
resultcounts
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
resultfinal <- resultcounts[c(-12,-15,-16),]
vennDiagram(resultfinal) #, include=""
resultboolean <- resultcounts > 0
resultfinal
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
resultfinal <- resultcounts[c(-12,-15,-16),]
vennCounts(resultfinal) #, include=""
#resultboolean <- resultcounts > 0
result
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
resultfinal <- resultcounts[c(-12,-15,-16),]
resultfinal
#vennCounts(resultfinal) #, include=""
#resultboolean <- resultcounts > 0
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
resultfinal <- resultcounts[c(-12,-15,-16),-5]
resultfinal
#vennCounts(resultfinal) #, include=""
#resultboolean <- resultcounts > 0
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
resultfinal <- resultcounts[c(-12,-15,-16),-5]
#resultfinal
vennCounts(resultfinal) #, include=""
#resultboolean <- resultcounts > 0
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
resultfinal <- resultcounts[c(-12,-15,-16),-5]
#resultfinal
vennDiagram(resultfinal) #, include=""
#resultboolean <- resultcounts > 0
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
resultfinal <- resultcounts[c(-12,-15,-16),]
resultfinal
#vennDiagram(resultfinal) #, include=""
#resultboolean <- resultcounts > 0
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
resultfinal <- resultcounts[c(-12,-15,-16),]
vennDiagram(resultcounts[c(-12,-15,-16),])
#vennDiagram(resultfinal) #, include=""
#resultboolean <- resultcounts > 0
result = decideTests(fit2,p.value=0.05, lfc = 1)
resultcounts <- vennCounts(result)
resultfinal <- resultcounts[c(-12,-15,-16),]
resultfinal
#vennDiagram(resultfinal) #, include=""
#resultboolean <- resultcounts > 0
?bar
result = decideTests(fit2,p.value=0.05, lfc = 1)
barplot(result)
cont.matrix= makeContrasts(
M6PR.U, M6PR.T, COL.T, COL.U
levels = exp_design)
cont.matrix= makeContrasts(
M6PR.U, M6PR.T, COL.T, COL.U,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2,p.value=0.05, lfc = 1)
barplot(result)
cont.matrix= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
M6PRvCOL.T = M6PR.T - COL.T,
M6PRvCOL.U = M6PR.U - COL.U,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2,p.value=0.05, lfc = 1)
barplot(result)
cont.matrix= makeContrasts(
M6PR.TvU.up = (M6PR.U - M6PR.T) > 0,
COL.UvT.up = (COL.U - COL.T) > 0,
M6PRvCOL.T.up = (M6PR.T - COL.T) > 0,
M6PRvCOL.U.up = (M6PR.U - COL.U) > 0,
M6PR.TvU.down = (M6PR.U - M6PR.T) < 0,
COL.UvT.down = (COL.U - COL.T) < 0,
M6PRvCOL.T.down = (M6PR.T - COL.T) < 0,
M6PRvCOL.U.down = (M6PR.U - COL.U) < 0,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2,p.value=0.05, lfc = 1)
barplot(result)
cont.matrix= makeContrasts(
M6PR.TvU.up = sum((M6PR.U - M6PR.T) > 0),
COL.UvT.up = (COL.U - COL.T) > 0,
M6PRvCOL.T.up = (M6PR.T - COL.T) > 0,
M6PRvCOL.U.up = (M6PR.U - COL.U) > 0,
M6PR.TvU.down = (M6PR.U - M6PR.T) < 0,
COL.UvT.down = (COL.U - COL.T) < 0,
M6PRvCOL.T.down = (M6PR.T - COL.T) < 0,
M6PRvCOL.U.down = (M6PR.U - COL.U) < 0,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2,p.value=0.05, lfc = 1)
barplot(result)
cont.matrix= makeContrasts(
M6PR.TvU.up = sum((M6PR.U - M6PR.T) > 0),
COL.UvT.up = sum((COL.U - COL.T) > 0),
M6PRvCOL.T.up = sum((M6PR.T - COL.T) > 0),
M6PRvCOL.U.up = sum((M6PR.U - COL.U) > 0),
M6PR.TvU.down = sum((M6PR.U - M6PR.T) < 0),
COL.UvT.down = sum((COL.U - COL.T) < 0),
M6PRvCOL.T.down = sum((M6PR.T - COL.T) < 0),
M6PRvCOL.U.down = sum((M6PR.U - COL.U) < 0),
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2,p.value=0.05, lfc = 1)
barplot(result)
cont.matrix
result = decideTests(fit2,p.value=0.05, lfc = 1)
vennDiagram(result)
result = decideTests(fit2,p.value=0.05, lfc = 1)
vennDiagram(result)
result = decideTests(fit2,p.value=0.05, lfc = 1)
barplot(result)
cont.matrix= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
M6PRvCOL.T = M6PR.T - COL.T,
M6PRvCOL.U = M6PR.U - COL.U,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
result = decideTests(fit2,p.value=0.05, lfc = 1)
barplot(result)
cont.matrix
result = decideTests(fit2,p.value=0.05)
barplot(result)
result
write.table(result, file="resultfile", row.names=false, sep="\t")
write.table(result, file="resultfile", row.names=F, sep="\t")
write.table(result, file="resultfile", sep="\t")
result = decideTests(fit2,p.value=0.05, lfc=1)
barplot(result)
# lfc =1 for 2-fold changes
result = decideTests(fit2,p.value=0.05, lfc=1)
barplot(as.matrix(result), beside=TRUE)
# lfc =1 for 2-fold changes
result = decideTests(fit2,p.value=0.05, lfc=1)
barplot(result, beside=TRUE)
sum(result[,1])
sum(result[,2])
sum(result[,3])
sum(result[,2]>0)
sum(result[,2]<0)
# lfc =1 for 2-fold changes
result = decideTests(fit2,p.value=0.05, lfc=1)
names = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated),
nrow=2,
dimnames=list(c("upregulated", "downregulated"), names))
#barplot(result, beside=TRUE)
resultsMatrix
# lfc =1 for 2-fold changes
result = decideTests(fit2,p.value=0.05, lfc=1)
names = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated),
nrow=2,
dimnames=list(c("upregulated", "downregulated"), names))
barplot(as.matrix(resultsMatrix), beside=TRUE)
# lfc =1 for 2-fold changes
result = decideTests(fit2,p.value=0.05,)
names = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated),
nrow=2,
dimnames=list(c("upregulated", "downregulated"), names))
barplot(as.matrix(resultsMatrix), beside=TRUE)
# lfc =1 for 2-fold changes
result = decideTests(fit2,p.value=0.01, lfc=1)
names = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated),
nrow=2,
dimnames=list(c("upregulated", "downregulated"), names))
barplot(as.matrix(resultsMatrix), beside=TRUE)
# lfc =1 for 2-fold changes
result = decideTests(fit2,p.value=0.05, lfc=1)
names = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated),
nrow=2,
dimnames=list(c("upregulated", "downregulated"), names))
barplot(as.matrix(resultsMatrix), beside=TRUE)
length(result[,1])
resultsMatrix
#Required libraries
library(affy)
library(limma)
library(RSQLite)
#Import data from sources
pd = read.AnnotatedDataFrame("samples.txt",header=TRUE,sep=",",row.names=1)
mydata = ReadAffy(filenames=pd$filename,phenoData=pd,verbose=TRUE)
sampleNames(mydata)=row.names(pData(pd))
#Call functions to organize data
eset = rma(mydata)
expression_data = exprs(eset)
TS = paste(pd$genotype,pd$treatment,sep=".")
TS = factor(TS, levels= c("M6PR.U","M6PR.T","COL.U","COL.T"))
exp_design = model.matrix(~0 + TS)
colnames(exp_design) = levels(TS)
exp_design
fit=lmFit(eset,exp_design)
cont.matrix= makeContrasts(
M6PR.TvU = M6PR.U - M6PR.T,
COL.UvT = COL.U - COL.T,
M6PRvCOL.T = M6PR.T - COL.T,
M6PRvCOL.U = M6PR.U - COL.U,
levels = exp_design)
fit2 = contrasts.fit(fit,cont.matrix)
fit2 = eBayes(fit2)
# lfc =1 for 2-fold changes
result = decideTests(fit2, p.value=0.05, lfc=1)
colnames = c("M6PR.TvU",	"COL.UvT",	"M6PRvCOL.T",	"M6PRvCOL.U")
rownames = c("upregulated", "downregulated")
upregulated = c(sum(result[,1]>0), sum(result[,2]>0), sum(result[,3]>0), sum(result[,4]>0))
downregulated = c(sum(result[,1]<0), sum(result[,2]<0), sum(result[,3]<0), sum(result[,4]<0))
resultsMatrix = matrix(c(upregulated, downregulated), nrow=2, dimnames=list(rownames, colnames))
barplot(as.matrix(resultsMatrix), beside=TRUE)
